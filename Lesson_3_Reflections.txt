When would you want to make a remote repository rather than keeping all your
work locally?

Any time I want the work to be outside-accessible, so, any time I'm working
on the repository from multiple machines, or any group project. Additionally,
 it's not a bad way to back up files.


Why might you want to always pull changes manually, rather than having Git
automatically stay up-to-date with your remote repository?

In the event that I cloned a repository from GitHub to work on my own branch,
but had not bothered renaming it, I would not want the author's changes to
reflect upon my work. (?)


Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Branching creates another line of development within a repository, while
cloning takes an entire repository and makes a copy of it, branches and all,
so that alternate/new lines of development may be done simultaneously and
entirely separately from the original repository. Forking is much like
cloning, only it's a feature that exists entirely within GitHub; in effect,
it clones an online repository, creating a copy on one's own GitHub profile,
and references back to the original repository so that credit is given
where credit is due. Branching, I would use for solo projects/early
development of new features, so that the features aren't visible until they
are ready. Cloning, I would use to bring a remote repository (which may
itself be a fork) onto my machine for further development. Forking, I would
use any time I want to collaborate on a project's development/try to create
a new feature that the lead developer is not currently pursuing.


What is the benefit of having a copy of the last known state of the remote
stored locally?

It is possible to update the copy before entering into a situation without
internet access, to work offline and still see some of the latest
changes made to the repository, and have an idea of where the project is
headed. Additionally, it may make it simpler, during collaboration, for
GitHub to have a pointer that's (usually) going to be relatively close to
the most recent version of the project on any collaborator's computer.


How would you collaborate without using Git or GitHub? What would be
easier, and what would be harder?

Sans Git and GitHub, I would likely use e-mail, USB flashdrives, and/or
cloud services like Google Drive to host files containing code, to be
individually downloaded and worked on by each collaborator. With each
change made by collaborators, an e-mail would likely have to be sent to
each other collaborator, containing the updated file(s), and a message
about what changed. Otherwise, code could be edited within Google Drive
and its ilk, but it would have to be downloaded to be compiled and
tested. The only way in which the absence of Git and GitHub would make
collaborating *easier,* in particular, is that it might be faster to get
coding done without periodically stopping to git commit, push, pull, etc.
